////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = start < end ? 1 : -1) {
 let array = [];
 if (start === end){
   return [];
 }
 if (step > 0) {
   for (let i = start; i <= end; i += step) array.push(i);
 } else {
   for (let i = start; i >= end; i += step) array.push(i);
 }
 return array;
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
 let total = 0;
 for (let value of array) {
   total += value;
 }
 return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
var reverseArray = function(arr) {
   var newArr = [];
   for (var i = arr.length - 1; i >= 0; i--)
       newArr.push(arr[i]);
   return newArr;
};
////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

var reverseArrayInPlace = function(arr) {
   var temp = 0;
   for (var i = 0; i < arr.length / 2; i++) {
       temp = arr[i];
       arr[i] = arr[arr.length - i - 1];
       arr[arr.length - i - 1] = temp;
   }
};
////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
 let list = null;
 for (let i = array.length - 1; i >= 0; i--) {
   list = {value: array[i], rest: list};
 }
 return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
 let array = [];
 for (let node = list; node; node = node.rest) {
   array.push(node.value);
 }
 return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
 return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
 if (!list) return undefined;
 else if (n == 0) return list.value;
 else return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
 if (a === b) return true;

 if (a == null || typeof a != "object" ||
     b == null || typeof b != "object")
   return false;

 var propsInA = 0, propsInB = 0;

 for (var prop in a)
   propsInA += 1;

 for (var prop in b) {
   propsInB += 1;
   if (!(prop in a) || !deepEqual(a[prop], b[prop]))
     return false;
 }

 return propsInA == propsInB;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
